import { UserAccess, SharedAccessMode, SharedDocumentInfo, ModificationType, ModificationsState } from "../SharedDocuments/types";
import { AnnotationBase } from "../Annotations/AnnotationTypes";
import { ClientRequestType, ClientMessage, ClientMessageType } from "./Connection/ClientMessage";
import { ServerMessage, StartSharedModeResponse } from "./Connection/ServerMessage";
import { LocalDocumentModification } from "./LocalDocumentModification";
import { ProgressDialogSink } from "../Dialogs/Types";
import { StampCategory, SaveSettings } from "../Models/ViewerTypes";
import { OpenDocumentInfo } from "./types";
import { ISupportApiBase } from "./ISupportApiBase";
export interface ISupportApi extends ISupportApiBase {
    status: 'opening' | 'opening-shared' | 'opened-shared' | 'opened' | 'closed';
    hasPersistentConnection?: boolean;
    sharedAccessMode: SharedAccessMode;
    userAccessList: UserAccess[];
    listAllUsers(): Promise<string[]>;
    listUsersWithAccess(): Promise<UserAccess[]>;
    listSharedDocuments(): Promise<SharedDocumentInfo[]>;
    modifySharedDocument(type: ModificationType, data?: {
        pageIndex: number;
        annotation: AnnotationBase;
    } | {
        pageIndex: number;
        annotationId: string;
    } | {
        resultStructure: number[];
        structureChanges: {
            pageIndex: number;
            add: boolean;
            checkNumPages: number;
        }[];
        pdfInfo: {
            numPages: number;
            fingerprint: string;
        };
    }): void;
    openSharedDocument(documentId: string): Promise<OpenDocumentInfo>;
    shareDocument(userName: string, accessMode: SharedAccessMode, modificationsState: ModificationsState, startSharedMode: boolean): Promise<OpenDocumentInfo | null>;
    startSharedMode(): Promise<StartSharedModeResponse>;
    stopSharedMode(): Promise<void>;
    onPushMessage(message: ServerMessage): void;
    unshareDocument(userName: string): Promise<void>;
    sendMessage(type: ClientMessageType, messageData: Partial<ClientMessage>): void;
    sendRequest<T>(type: ClientRequestType, messageData: Partial<ClientMessage>): Promise<T>;
    getDownloadUrl(filename: string, format: "PDF" | "PNG" | undefined, correlationId: string): string;
    getDownloadUnmodifiedUrl(filename: string): string;
    checkDocumentLoader(): Promise<boolean>;
    closeDocumentLoader(): Promise<boolean>;
    collectModifiedFiles(documentModification: LocalDocumentModification | ModificationsState, saveSettings?: SaveSettings): string[];
    uploadFiles(fileIds: string[], sink?: ProgressDialogSink): Promise<boolean>;
    downloadFiles(fileIds: string[], sink?: ProgressDialogSink): Promise<boolean>;
    getStampCategories(): Promise<StampCategory[]>;
    getStampImageUrl(categoryId: string, imageName: string, enableCache: boolean): string;
}
